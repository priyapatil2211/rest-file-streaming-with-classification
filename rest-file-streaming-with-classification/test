
package com.example.client;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

import com.bigid.sdk.classifications.ClassificationsSearcher;
import com.bigid.sdk.classifications.ClassificationsSearcherBuilder;
import com.bigid.sdk.classifications.dto.Findings;
import com.bigid.sdk.classifications.dto.Match;

import jep.Run;

public class ClientApplication {

    private static final List<String> filePaths = List.of(
            "/home/priya.patil/GRPC-POC/grpc-file-service/dummy_files/testfile_0.txt"
    );


    public static void main(String[] args) {

        AtomicInteger threadCounter = new AtomicInteger(1);
        ExecutorService executor = Executors.newFixedThreadPool(2, runnable -> {
            Thread t = new Thread(runnable);
            t.setName("ThreadNum-" + threadCounter.getAndIncrement());
            return t;
        });

        for(int i = 0; i < 2; i++) {
            executor.submit(() -> processFiles());
        }

        executor.shutdown();
    }

    private static void processFiles() {
        for (String path : filePaths) {
            String threadName = Thread.currentThread().getName();
            Runtime runtime = Runtime.getRuntime();
            String who = "ThreadName :" + threadName + "File: " + path + " - ";
            System.out.println("1");
            //System.out.println("Before Execution : " + who);

            printMemoryUsage(runtime, who);

            try {
                URL url = new URL("http://localhost:8080/read-file");
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("POST");
                connection.setDoOutput(true);
                connection.setRequestProperty("Content-Type", "text/plain");
                OutputStream os = connection.getOutputStream();
                os.write(path.getBytes());
                os.flush();

                System.out.println("2");

                InputStream in = connection.getInputStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                byte[] buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = in.read(buffer)) != -1) {
                    baos.write(buffer, 0, bytesRead);
                }

                System.out.println("3");

                InputStream stream = new ByteArrayInputStream(baos.toByteArray());
                System.out.println("4");

                ClassificationsSearcher classificationSearcher = new ClassificationsSearcherBuilder()
                    .withDefaultClassifications(false)
                    .withClassificationMatcherAmount(100)
                    .build();

                System.out.println("5");

                Findings findingsFromFile = classificationSearcher.searchMatchesInFile(stream, false);

                System.out.println("6");

                if (findingsFromFile.isPiiFound()) {
                    System.out.println("matches found");
                } else {
                    System.out.println("no matches found");
                }

                in.close();
                os.close();
                connection.disconnect();

                System.out.println("After Execution : " + who);

                printMemoryUsage(runtime, who);
            } catch (Exception e) {
                System.out.println("Exception: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    public static void printMemoryUsage(Runtime runtime, String prefix) {
        long totalMemory = runtime.totalMemory();
        long freeMemory = runtime.freeMemory();
        long usedMemory = totalMemory - freeMemory;
        System.out.println("------------------------------------------------");
        System.out.println(prefix);
        System.out.println("Total memory: " + totalMemory / 1024 + " KB");
        System.out.println("Free memory: " + freeMemory / (1024 * 1024) + " MB");
        System.out.println("Used memory: " + usedMemory / (1024 * 1024) + " MB");
        System.out.println("------------------------------------------------");
    }


}
